declare const messages: {
    doSave: string;
    doCancel: string;
    doLogOutAllSessions: string;
    doRemove: string;
    doAdd: string;
    doSignOut: string;
    editAccountHtmlTitle: string;
    federatedIdentitiesHtmlTitle: string;
    accountLogHtmlTitle: string;
    changePasswordHtmlTitle: string;
    sessionsHtmlTitle: string;
    accountManagementTitle: string;
    authenticatorTitle: string;
    applicationsHtmlTitle: string;
    authenticatorCode: string;
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    passwordConfirm: string;
    passwordNew: string;
    username: string;
    address: string;
    street: string;
    locality: string;
    region: string;
    postal_code: string;
    country: string;
    emailVerified: string;
    gssDelegationCredential: string;
    role_admin: string;
    "role_realm-admin": string;
    "role_create-realm": string;
    "role_view-realm": string;
    "role_view-users": string;
    "role_view-applications": string;
    "role_view-clients": string;
    "role_view-events": string;
    "role_view-identity-providers": string;
    "role_manage-realm": string;
    "role_manage-users": string;
    "role_manage-applications": string;
    "role_manage-identity-providers": string;
    "role_manage-clients": string;
    "role_manage-events": string;
    "role_view-profile": string;
    "role_manage-account": string;
    "role_read-token": string;
    "role_offline-access": string;
    role_uma_authorization: string;
    client_account: string;
    "client_security-admin-console": string;
    "client_admin-cli": string;
    "client_realm-management": string;
    requiredFields: string;
    allFieldsRequired: string;
    backToApplication: string;
    backTo: string;
    date: string;
    event: string;
    ip: string;
    client: string;
    clients: string;
    details: string;
    started: string;
    lastAccess: string;
    expires: string;
    applications: string;
    account: string;
    federatedIdentity: string;
    authenticator: string;
    sessions: string;
    log: string;
    application: string;
    availablePermissions: string;
    grantedPermissions: string;
    grantedPersonalInfo: string;
    additionalGrants: string;
    action: string;
    inResource: string;
    fullAccess: string;
    offlineToken: string;
    revoke: string;
    configureAuthenticators: string;
    mobile: string;
    totpStep1: string;
    totpStep2: string;
    totpStep3: string;
    missingUsernameMessage: string;
    missingFirstNameMessage: string;
    invalidEmailMessage: string;
    missingLastNameMessage: string;
    missingEmailMessage: string;
    missingPasswordMessage: string;
    notMatchPasswordMessage: string;
    missingTotpMessage: string;
    invalidPasswordExistingMessage: string;
    invalidPasswordConfirmMessage: string;
    invalidTotpMessage: string;
    usernameExistsMessage: string;
    emailExistsMessage: string;
    readOnlyUserMessage: string;
    readOnlyPasswordMessage: string;
    successTotpMessage: string;
    successTotpRemovedMessage: string;
    successGrantRevokedMessage: string;
    accountUpdatedMessage: string;
    accountPasswordUpdatedMessage: string;
    missingIdentityProviderMessage: string;
    invalidFederatedIdentityActionMessage: string;
    identityProviderNotFoundMessage: string;
    federatedIdentityLinkNotActiveMessage: string;
    federatedIdentityRemovingLastProviderMessage: string;
    identityProviderRedirectErrorMessage: string;
    identityProviderRemovedMessage: string;
    identityProviderAlreadyLinkedMessage: string;
    staleCodeAccountMessage: string;
    consentDenied: string;
    accountDisabledMessage: string;
    accountTemporarilyDisabledMessage: string;
    invalidPasswordMinLengthMessage: string;
    invalidPasswordMinLowerCaseCharsMessage: string;
    invalidPasswordMinDigitsMessage: string;
    invalidPasswordMinUpperCaseCharsMessage: string;
    invalidPasswordMinSpecialCharsMessage: string;
    invalidPasswordNotUsernameMessage: string;
    invalidPasswordRegexPatternMessage: string;
    invalidPasswordHistoryMessage: string;
    invalidPasswordGenericMessage: string;
    newPasswordSameAsOld: string;
    passwordConfirmNotMatch: string;
};
export default messages;
