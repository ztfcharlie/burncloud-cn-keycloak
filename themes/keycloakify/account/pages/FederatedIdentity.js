import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export default function FederatedIdentity(props) {
    const { kcContext, i18n, doUseDefaultCss, classes, Template } = props;
    const { url, federatedIdentity, stateChecker } = kcContext;
    const { msg } = i18n;
    return (_jsx(Template, Object.assign({}, { kcContext, i18n, doUseDefaultCss, classes }, { active: "social" }, { children: _jsxs("div", Object.assign({ className: "main-layout social" }, { children: [_jsx("div", Object.assign({ className: "row" }, { children: _jsx("div", Object.assign({ className: "col-md-10" }, { children: _jsx("h2", { children: msg("federatedIdentitiesHtmlTitle") }) })) })), _jsx("div", Object.assign({ id: "federated-identities" }, { children: federatedIdentity.identities.map(identity => (_jsxs("div", Object.assign({ className: "row margin-bottom" }, { children: [_jsx("div", Object.assign({ className: "col-sm-2 col-md-2" }, { children: _jsx("label", Object.assign({ htmlFor: identity.providerId, className: "control-label" }, { children: identity.displayName })) })), _jsx("div", Object.assign({ className: "col-sm-5 col-md-5" }, { children: _jsx("input", { disabled: true, className: "form-control", value: identity.userName }) })), _jsx("div", Object.assign({ className: "col-sm-5 col-md-5" }, { children: identity.connected ? (federatedIdentity.removeLinkPossible && (_jsxs("form", Object.assign({ action: url.socialUrl, method: "post", className: "form-inline" }, { children: [_jsx("input", { type: "hidden", name: "stateChecker", value: stateChecker }), _jsx("input", { type: "hidden", name: "action", value: "remove" }), _jsx("input", { type: "hidden", name: "providerId", value: identity.providerId }), _jsx("button", Object.assign({ id: `remove-link-${identity.providerId}`, className: "btn btn-default" }, { children: msg("doRemove") }))] })))) : (_jsxs("form", Object.assign({ action: url.socialUrl, method: "post", className: "form-inline" }, { children: [_jsx("input", { type: "hidden", name: "stateChecker", value: stateChecker }), _jsx("input", { type: "hidden", name: "action", value: "add" }), _jsx("input", { type: "hidden", name: "providerId", value: identity.providerId }), _jsx("button", Object.assign({ id: `add-link-${identity.providerId}`, className: "btn btn-default" }, { children: msg("doAdd") }))] }))) }))] }), identity.providerId))) }))] })) })));
}
//# sourceMappingURL=FederatedIdentity.js.map